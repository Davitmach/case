const { Telegraf, Markup } = require('telegraf');
const { Client } = require('pg');
require('dotenv').config();
const allowedUsers = [1615644899, 1974611991, 482233894, 5590809125];
const BOT_TOKEN = process.env.TG_TOKEN;
const bot = new Telegraf(BOT_TOKEN);


const isUserAllowed = (ctx) => {
  if (!allowedUsers.includes(ctx.from.id)) {
    ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    return false;
  }
  return true;
};
 

const dbClient = new Client({
  connectionString: "postgresql://david:5o7AIPBP4WU2AfaRyAzqY1xTubmsjyR4@dpg-cvlnm6idbo4c7385v990-a.oregon-postgres.render.com/case_31na",
  ssl: { rejectUnauthorized: false },
});

const connectToDatabase = async () => {
  try {
    await dbClient.connect();
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    setTimeout(connectToDatabase, 5000);
  }
};
connectToDatabase();
const validateEmail = (email) => {
  const regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
  return regex.test(email);
};
const userState = new Map();
bot.telegram.setMyCommands([
 
  { command: 'start', description: 'üëã –ù–∞—á–∞—Ç—å' },
  { command: '/help', description: '‚ùì –ü–æ–º–æ—â—å' },
  { command: '/website', description: 'üåê –ù–∞—à –≤–µ–±-—Å–∞–π—Ç' },
  { command: '/channel', description: 'üì± –ù–∞—à Telegram-–∫–∞–Ω–∞–ª' },
  { command: '/email', description: '‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É' },
  { command: '/team', description: 'üë• –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞' },
  { command: '/request', description: 'üìÑ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' },  // Add this line
]);
bot.start((ctx) => {
  if (!isUserAllowed(ctx)) return;
  ctx.reply('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n' +
    '–ì–æ—Ç–æ–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é? –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º!\n\n' +
    'üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.',
Markup.inlineKeyboard([
[Markup.button.callback('‚ò∞ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', 'open_menu')]
])
);
});
bot.command('request', async (ctx) => {


  userState.set(ctx.from.id, { step: 'name' });
  ctx.reply('üë§ –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É:\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
});
bot.command('email', async (ctx) => {
  await ctx.reply('–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É: hello@itperfomance.ru');
});
bot.command('team', async (ctx) => {
  const res = await dbClient.query('SELECT * FROM cases');
  const cases = res.rows;
  
  
  await ctx.reply(
    `üë• *–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞:*\n\n` +
    `üîπ *–ê–ª—å–±–µ—Ä—Ç* ‚Äî –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏\n` +
    `üîπ *–î–∞–≤–∏–¥* ‚Äî –§—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n` +
    `üîπ *–ú–∞–∫—Å–∏–º* ‚Äî –õ–∏–Ω—É–∫—Å, Python\n` +
    `üîπ *–î–∞–Ω–∏–ª* ‚Äî –í–µ–±-–¥–∏–∑–∞–π–Ω–µ—Ä, Figma\n`+
       `üìä *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤*: ${cases.length}`
  );
});
bot.command('channel', async (ctx) => {
  await ctx.reply('üöÄ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª: [–∫–ª–∏–∫–∞–π](https://t.me/itperfomanceru)', {
    parse_mode: 'Markdown'
  });
});
bot.command('website', async (ctx) => {
  await ctx.reply(
    '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à –≤–µ–±-—Å–∞–π—Ç:',
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üåê –ù–∞—à –≤–µ–±-—Å–∞–π—Ç',
              url: 'https://itperfomance.ru'  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π URL
            }
          ]
        ]
      }
    }
  );
});

bot.action('open_menu', (ctx) => {
  if (!isUserAllowed(ctx)) return;
  ctx.editMessageText(
    '–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π:',
    Markup.inlineKeyboard([
      [Markup.button.callback('üì¶ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–µ–π—Å—ã', 'get_cases')],
      [Markup.button.callback('‚ûï –ù–æ–≤—ã–π –∫–µ–π—Å', 'new_case')],

     
    ])
  );
  ctx.answerCbQuery();  // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
});

bot.on('text', async (ctx) => {
  const user = userState.get(ctx.from.id);
  if (!user) return;

  if (user.step === 'name') {
    user.name = ctx.message.text;
    user.step = 'position';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:');
  } else if (user.step === 'position') {
    user.position = ctx.message.text;
    user.step = 'phone';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
  } else if (user.step === 'phone') {
    user.phone = ctx.message.text;
    user.step = 'email';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:');
  } else if (user.step === 'email') {
    const email = ctx.message.text;
    if (validateEmail(email)) {
      user.email = email;
      user.step = 'finish';
      ctx.reply('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API
      const data = {
        name: user.name,
        position: user.position,
        phone: user.phone,
        email: user.email,
      };

      try {
        await fetch('https://itperfomance.ru/api/sheets/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });
        console.log('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:', err);
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.');
      }

      userState.delete(ctx.from.id);
    } else {
      ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä, example@mail.com).');
    }
  }
});
bot.command('help', async (ctx) => {  
  if (!isUserAllowed(ctx)) return;  

  await ctx.reply(
    `üìå *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n` +
    `üîπ /start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n` +
    `üîπ /help ‚Äî –û—Ç–∫—Ä—ã—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n` +
    `üéõ *–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π:*\n` +
    `‚úÖ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–µ–π—Å—ã\n` +
    `‚ûï –ù–æ–≤—ã–π –∫–µ–π—Å\n` +

    `üëÆ‚Äç‚ôÇ *–î–æ—Å—Ç—É–ø:*\n` +
    `–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n` +
    `‚úâ *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:* –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! üöÄ`,
    { parse_mode: 'Markdown' }
  );  

});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–µ–π—Å–æ–≤
bot.action('get_cases', async (ctx) => {
  if (!isUserAllowed(ctx)) return;
  
  try {
    const res = await dbClient.query('SELECT * FROM cases');
    const cases = res.rows;

    if (cases.length > 0) {
      for (const caseItem of cases) {
        ctx.reply(
          `üÜî ID: ${caseItem.id}\nüìå –ù–∞–∑–≤–∞–Ω–∏–µ: ${caseItem.title}\nüìÖ –î–∞—Ç–∞: ${caseItem.date}`,
          Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å', `delete_case_${caseItem.id}`)]
          ])
        );
      }
    } else {
      ctx.reply('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤.');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–µ–π—Å–æ–≤:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–µ–π—Å–æ–≤.');
  }

  ctx.answerCbQuery();
});


bot.action('new_case', (ctx) => {
  if (!isUserAllowed(ctx)) return;
  userState.set(ctx.from.id, { step: 'title' });
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞ (Title):');
  ctx.answerCbQuery();  // –û—Ç–≤–µ—Ç —Å—Ä–∞–∑—É
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–µ–π—Å–∞
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–µ–π—Å–∞
bot.on('text', async (ctx) => {
  const user = userState.get(ctx.from.id);
  if (!user) return;

  if (user.step === 'title') {
    user.title = ctx.message.text;
    user.step = 'date';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:');
  } else if (user.step === 'date') {
    user.date = ctx.message.text;
    user.step = 'case_type';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∫–µ–π—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤", "–í–µ–±-–î–∏–∑–∞–π–Ω", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ò–ò", "–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"):');
  } else if (user.step === 'case_type') {
    user.case_type = ctx.message.text;
    user.step = 'mainImg';
    ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (mainImg):');
  } else if (user.step === 'mainImg') {
    user.mainImg = ctx.message.text;
    user.step = 'innerImg';
    ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (innerImg):');
  } else if (user.step === 'innerImg') {
    user.innerImg = ctx.message.text;
    user.step = 'info_title';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (info title):');
  } else if (user.step === 'info_title') {
    if (!user.info) user.info = [];
    user.info.push({ title: ctx.message.text, description: '' });  
    user.step = 'info_description';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (info description):');
  } else if (user.step === 'info_description') {
    user.info[user.info.length - 1].description = ctx.message.text;
    ctx.reply('–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?', Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–∞', 'add_info')],
      [Markup.button.callback('‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º', 'next_slider')]
    ]));
    user.step = 'wait';
  } else if (user.step === 'sliderImg') {
    if (!user.sliderImg) user.sliderImg = [];
    user.sliderImg.push(ctx.message.text);
    ctx.reply('–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?', Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–∞', 'add_slider')],
      [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', 'finish_case')]
    ]));
    user.step = 'wait';
  }
});






bot.action('add_info', (ctx) => {
  const user = userState.get(ctx.from.id);


  // Ensure the `info` array exists
  if (!user.info) {
    user.info = [];  // Create the array if it doesn't exist
  }

   // Check what's inside before the update
  
  // Add the new object to the `info` array
  user.info.push({ title: null, description: null });

  // Update the user's step and prompt for input
  user.step = 'info_title';
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (info title):');
  
  // Acknowledge the callback query
  ctx.answerCbQuery();
});


bot.on('text', async (ctx) => {
  const user = userState.get(ctx.from.id);
  if (!user) return;

  if (user.step === 'info_title') {
    user.info[user.info.length - 1].title = ctx.message.text;  // –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±—ä–µ–∫—Ç–µ
    user.step = 'info_description';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (info description):');
  } else if (user.step === 'info_description') {
    user.info[user.info.length - 1].description = ctx.message.text;  // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±—ä–µ–∫—Ç–µ
    ctx.reply('–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?', Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–∞', 'add_info')],
      [Markup.button.callback('‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º', 'next_slider')]
    ]));
    user.step = 'wait';
  }
});


bot.action('next_slider', (ctx) => {
  const user = userState.get(ctx.from.id);
  user.sliderImg = [];
  user.step = 'sliderImg';
  ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞:');
  ctx.answerCbQuery();  // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
});

bot.action('add_slider', (ctx) => {
  const user = userState.get(ctx.from.id);
  user.step = 'sliderImg';
  ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞:');
  ctx.answerCbQuery();  // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
});

bot.action('finish_case', async (ctx) => {
  const user = userState.get(ctx.from.id);
  try {
    const caseRes = await dbClient.query(
      'INSERT INTO cases (title, date, mainImg, innerImg, case_type) VALUES ($1, $2, $3, $4, $5) RETURNING id',
      [user.title, user.date, user.mainImg, user.innerImg, user.case_type]
    );
    const caseId = caseRes.rows[0].id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
    if (user.info && user.info.length > 0) {

      for (const info of user.info) {
        if (info.title && info.description) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
          await dbClient.query(
            'INSERT INTO info (case_id, title, description) VALUES ($1, $2, $3)',
            [caseId, info.title, info.description]
          );
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
    if (user.sliderImg && user.sliderImg.length > 0) {
    
      
      for (const img of user.sliderImg) {
        await dbClient.query(
          'INSERT INTO sliderImg (case_id, image_url) VALUES ($1, $2)',
          [caseId, img]
        );
      }
    }

    ctx.reply('‚úÖ –ö–µ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
    userState.delete(ctx.from.id);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–µ–π—Å–∞:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–µ–π—Å–∞.');
  }
  ctx.answerCbQuery();
});
bot.action(/^delete_case_(\d+)$/, async (ctx) => {
  if (!isUserAllowed(ctx)) return;

  const caseId = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º ID –∫–µ–π—Å–∞ –∏–∑ callback data

  try {
    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã info –∏ sliderImg)
    await dbClient.query('DELETE FROM info WHERE case_id = $1', [caseId]);
    await dbClient.query('DELETE FROM sliderImg WHERE case_id = $1', [caseId]);
    
    // –£–¥–∞–ª—è–µ–º —Å–∞–º –∫–µ–π—Å
    await dbClient.query('DELETE FROM cases WHERE id = $1', [caseId]);

    ctx.reply(`‚úÖ –ö–µ–π—Å —Å ID ${caseId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–µ–π—Å–∞:', err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–µ–π—Å–∞.');
  }

  ctx.answerCbQuery();
});



const DOMAIN = 'https://case-1.onrender.com'; 
const TOKEN = '8091735964:AAEzLzbMy07-NeBD88YQlwjpQnXHZ5opAMc'; 

bot.launch({
  webhook: {
    domain: DOMAIN,
    port:  3002, 
    hookPath: `/${TOKEN}`
  }
});




process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));